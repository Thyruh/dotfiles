;;; package --- summary
;;; Commentary:
;;; Code:

;; Initialize package and use-package if not installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(use-package copilot
  :ensure t
  :config
  (add-hook 'prog-mode-hook 'copilot-mode))

(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                        ("gnu" . "https://elpa.gnu.org/packages/")
                        ("org" . "https://orgmode.org/elpa/")))
(package-initialize)

;; Install and configure lsp-mode, lsp-ui, company, flycheck
(use-package lsp-mode
  :ensure t
  :hook ((c-mode c++-mode), lsp)
  :commands lsp)

(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode t))

(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)

(use-package company
  :ensure t
  :config
  (add-hook 'after-init-hook 'global-company-mode))

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

(require 'quelpa)
(require 'use-package)
(require 'quelpa-use-package)

(use-package copilot
  :quelpa (copilot :fetcher github
                   :repo "copilot-emacs/copilot.el"
                   :branch "main"
                   :files ("*.el")))

(define-key copilot-completion-map (kbd "C-<return>") 'copilot-accept-completion)
(define-key copilot-completion-map (kbd "C-<right>") 'copilot-accept-completion-by-word)

(global-auto-revert-mode t)

;; Configure eglot (remove if using lsp-mode instead)
(use-package eglot
  :ensure t
  :hook ((c-mode c++-mode) . eglot))

;; Basic UI customizations(require 'peep-dired)
(define-key dired-mode-map (kbd "P") 'peep-dired)

(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)

(setq show-paren-delay 0) ;; No delay
(show-paren-mode 1)

;; Escape key binding
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Enable relative line numbers
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)

;; Ivy setup
(setq make-backup-files nil)
(ivy-mode 1)
(global-set-key (kbd "C-,") 'counsel-switch-buffer)

;; Disable arrow keys globally
(global-set-key [left] 'ignore)
(global-set-key [right] 'ignore)
(global-set-key [down] 'ignore)
(global-set-key [up] 'ignore)

(global-font-lock-mode 1)
		
;; Theme setup
(load-theme 'doom-ir-black t)
(set-frame-parameter (selected-frame) 'alpha '(85 . 85))
(add-to-list 'default-frame-alist '(alpha . (85 . 85)))

;; A function to open shell buffer
(defun open-shell ()
  "Open a shell buffer."
  (interactive)
  (shell))
(global-set-key (kbd "C-h l") 'open-shell)

;; A function to delete the contents of the brackets at point
(defun delete-brackets ()
  "Delete the contents of the brackets, leaving the brackets themselves."
  (interactive)
  (save-excursion
    (let* ((syntax (syntax-ppss)) ;; Parse the current syntax state
           (start (nth 1 syntax)) ;; Get the position of the opening bracket
           (end (when start (scan-sexps start 1)))) ;; Find the position of the closing bracket
      (if (and start end)
          (progn
            (delete-region (1+ start) (1- end))
            (message "Deleted contents inside brackets."))
        (message "Not inside a bracketed region!")))))

(global-set-key (kbd "C-w") 'delete-brackets)

;; Keybinding for selecting current word
(defun select-word ()
  "Select the current word."
  (interactive)
  (skip-syntax-backward "w_")
  (set-mark (point))
  (skip-syntax-forward "w_"))
(global-set-key (kbd "C-c w") 'select-word)
 
;; Compilation functions
(defun compile-cpp ()
  "Compile the current C++ file using g++."
  (interactive)
  (let ((output-file (concat "~/Architect/C++/Bins/" (file-name-sans-extension (file-name-nondirectory (buffer-file-name))))))

    ;; Compile using g++
    (compile (concat "g++ -o " output-file " " (buffer-file-name)))))
(global-set-key (kbd "C-c C-r") 'compile-cpp)

(defun compile-haskell ()
  "Compile the current Haskell file."
  (interactive)
  (message "Compiling Haskell code...")
  (compile (concat "ghc -o "
                   (shell-quote-argument (concat (file-name-sans-extension (buffer-file-name)) ".out"))
                   " "
                   (shell-quote-argument (buffer-file-name)))))
(global-set-key (kbd "C-c C-h") 'compile-haskell)

;; Hotkeys for file navigation
(defvar my-init-file "~/.emacs")
(global-set-key (kbd "C-c f") (lambda () (interactive) (find-file my-init-file)))
(global-set-key (kbd "C-c r") (lambda () (interactive) (message "Switching to fish config file...") (find-file "~/.bashrc")))
(global-set-key (kbd "C-c v") (lambda () (interactive) (message "Switching to the main programming directory...") (find-file "~/Architect")))

;; Keybinding for moving lines up and down
(global-set-key (kbd "M-p") 'move-text-up)
(global-set-key (kbd "M-n") 'move-text-down)

(global-set-key (kbd "C-q") 'back-to-indentation)

;; Keybinding for selecting whole line
(defun select-current-line ()
  "Select the whole line."
  (interactive)
  (move-beginning-of-line 1)
  (set-mark (point))
  (move-end-of-line 1))
(global-set-key (kbd "C-c l") 'select-current-line)
(global-set-key (kbd "C-c C-l") 'select-current-line)

;; Functions for jumping around in the buffer
(defun jump-n-lines (n)
  "Jump forward by N lines if N is positive, or backward by N lines if negative."
  (interactive "nNumber of lines to jump: ")
  (forward-line n))
(global-set-key (kbd "M-g g") 'jump-n-lines)

;; Duplication of current line
(defun duplicate-current-line ()
  "Duplicate the current line."
  (interactive)
  (beginning-of-line)
  (kill-ring-save (point) (line-end-position))
  (end-of-line)
  (newline)
  (yank))
(global-set-key (kbd "C-c d") 'duplicate-current-line)

;; Evaluate the buffer
(global-set-key (kbd "C-j")
  (lambda ()
    (interactive)
    (eval-buffer)
    (message "Buffer evaluated!")))

;; Additional settings and keybindings
(setq lsp-enable-on-type-formatting nil)
(setq lsp-format-buffer nil)

;; Auto-loading part
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("f4d1b183465f2d29b7a2e9dbe87ccc20598e79738e5d29fc52ec8fb8c576fcfd" "e13beeb34b932f309fb2c360a04a460821ca99fe58f69e65557d6c1b10ba18c7" default))
 '(inhibit-startup-screen t)
 '(package-selected-packages
   '(peep-dired copilot smartparens company quelpa-use-package flycheck use-package-hydra move-text lsp-mode lsp-ui eglot doom-themes counsel ivy-explorer ivy gruber-darker-theme))
 '(warning-suppress-types '(((copilot copilot-no-mode-indent)))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(put 'upcase-region 'disabled nil)

;;; .emacs ends here
